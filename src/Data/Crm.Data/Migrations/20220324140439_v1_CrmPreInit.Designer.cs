// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RedPhase.Crm.Data;

#nullable disable

namespace RedPhase.Crm.Data.Migrations
{
    [DbContext(typeof(CrmDbContext))]
    [Migration("20220324140439_v1_CrmPreInit")]
    partial class v1_CrmPreInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Crm")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("CustomerId_HiLo")
                .StartsAt(1000L)
                .IncrementsBy(100);

            modelBuilder.HasSequence("OrganizationId_HiLo")
                .StartsAt(1000L)
                .IncrementsBy(100);

            modelBuilder.HasSequence("PartyId_HiLo")
                .StartsAt(1000L)
                .IncrementsBy(100);

            modelBuilder.Entity("RedPhase.Entities.Base.DbActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("TokenId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.ToTable("Activities", "Crm");
                });

            modelBuilder.Entity("RedPhase.Entities.Base.DbToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ClientId")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidThru")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tokens", "Crm");
                });

            modelBuilder.Entity("RedPhase.Entities.Crm.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "CustomerId_HiLo");

                    b.Property<long>("CreateActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MaidenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("MarriageDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MotherMaidenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MotherName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("UpdateActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidThru")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateActivityId");

                    b.HasIndex("UpdateActivityId");

                    b.ToTable("Customers", "Crm");
                });

            modelBuilder.Entity("RedPhase.Entities.Crm.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "OrganizationId_HiLo");

                    b.Property<long>("CreateActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FoundationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FoundationGeoId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("GroupNameShort")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PublicOrganization")
                        .HasColumnType("text");

                    b.Property<string>("TaxOfficeName")
                        .HasColumnType("text");

                    b.Property<int?>("TaxOfficePartyId")
                        .HasColumnType("integer");

                    b.Property<string>("TradeChamberRegistrationNumber")
                        .HasColumnType("text");

                    b.Property<long?>("UpdateActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidThru")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateActivityId");

                    b.HasIndex("UpdateActivityId");

                    b.ToTable("Organizations", "Crm");
                });

            modelBuilder.Entity("RedPhase.Entities.Crm.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "PartyId_HiLo");

                    b.Property<long>("CreateActivityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("InitialContactDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastContactDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PartyType")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdateActivityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidThru")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreateActivityId");

                    b.HasIndex("UpdateActivityId");

                    b.ToTable("Parties", "Crm");
                });

            modelBuilder.Entity("RedPhase.Entities.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "Identity", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("RedPhase.Entities.Base.DbActivity", b =>
                {
                    b.HasOne("RedPhase.Entities.Base.DbToken", "Token")
                        .WithMany("Activities")
                        .HasForeignKey("TokenId");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("RedPhase.Entities.Crm.Customer", b =>
                {
                    b.HasOne("RedPhase.Entities.Base.DbActivity", "CreateActivity")
                        .WithMany()
                        .HasForeignKey("CreateActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedPhase.Entities.Crm.Party", "Party")
                        .WithOne("Customer")
                        .HasForeignKey("RedPhase.Entities.Crm.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedPhase.Entities.Base.DbActivity", "UpdateActivity")
                        .WithMany()
                        .HasForeignKey("UpdateActivityId");

                    b.Navigation("CreateActivity");

                    b.Navigation("Party");

                    b.Navigation("UpdateActivity");
                });

            modelBuilder.Entity("RedPhase.Entities.Crm.Organization", b =>
                {
                    b.HasOne("RedPhase.Entities.Base.DbActivity", "CreateActivity")
                        .WithMany()
                        .HasForeignKey("CreateActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedPhase.Entities.Crm.Party", "Party")
                        .WithOne("Organization")
                        .HasForeignKey("RedPhase.Entities.Crm.Organization", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedPhase.Entities.Base.DbActivity", "UpdateActivity")
                        .WithMany()
                        .HasForeignKey("UpdateActivityId");

                    b.Navigation("CreateActivity");

                    b.Navigation("Party");

                    b.Navigation("UpdateActivity");
                });

            modelBuilder.Entity("RedPhase.Entities.Crm.Party", b =>
                {
                    b.HasOne("RedPhase.Entities.Base.DbActivity", "CreateActivity")
                        .WithMany()
                        .HasForeignKey("CreateActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedPhase.Entities.Base.DbActivity", "UpdateActivity")
                        .WithMany()
                        .HasForeignKey("UpdateActivityId");

                    b.Navigation("CreateActivity");

                    b.Navigation("UpdateActivity");
                });

            modelBuilder.Entity("RedPhase.Entities.Base.DbToken", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("RedPhase.Entities.Crm.Party", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Organization");
                });
#pragma warning restore 612, 618
        }
    }
}
